app:
  title: Backstage Example App
  baseUrl: http://localhost:7007
  experimental:
    packages: all # ✨

  #datadogRum:
  #  clientToken: '123456789'
  #  applicationId: qwerty
  #   site: # datadoghq.eu default = datadoghq.com
  #   env: # optional
  #   sessionSampleRate: 100
  #   sessionReplaySampleRate: 0

  support:
    url: https://github.com/backstage/backstage/issues # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: Issues
        icon: github
        links:
          - url: https://github.com/backstage/backstage/issues
            title: GitHub Issues
      - title: Discord Chatroom
        icon: chat
        links:
          - url: https://discord.gg/backstage-687207715902193673
            title: '#backstage'

  packageName: example-app

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
#   auth:
#     keys:
#       - secret: ${BACKEND_SECRET}

  auth:
    # TODO: once plugins have been migrated we can remove this, but right now it
    # is require for the backend-next to work in this repo
    dangerouslyDisableDefaultAuthPolicy: true

  baseUrl: http://localhost:7007
  listen:
    port: 7007
  database:
    client: better-sqlite3
    connection: ':memory:'
#    client: pg
#    connection:
#      host: ${POSTGRES_HOST}
#      port: ${POSTGRES_PORT}
#      user: ${POSTGRES_USER}
#      password: ${POSTGRES_PASSWORD}
#    prefix: 'example_prefix_'
  cors:
    origin: http://localhost:7007
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
    img-src: ["'self'", 'data:', 'https://avatars.githubusercontent.com', 'https://img.shields.io']
  reading:
    allow:
      - host: example.com
      - host: '*.mozilla.org'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

# See README.md in the proxy-backend plugin for information on the configuration format
sentry:
  organization: vendic

proxy:
  endpoints:
    '/sentry/api':
      target: https://sentry.io/api/
      allowedMethods: [ 'GET' ]
      headers:
        Authorization: Bearer ${SENTRY_TOKEN}
    '/newrelic/apm/api':
      target: https://api.newrelic.com/v2
      headers:
        X-Api-Key: ${NEW_RELIC_REST_API_KEY}
      allowedHeaders:
        - link
#    '/circleci/api':
#      target: https://circleci.com/api/v1.1
#      headers:
#        Circle-Token: ${CIRCLECI_AUTH_TOKEN}
#
#    '/jenkins/api':
#      target: http://localhost:8080
#      headers:
#        Authorization: ${JENKINS_BASIC_AUTH_HEADER}
#
#    '/travisci/api':
#      target: https://api.travis-ci.com
#      changeOrigin: true
#      headers:
#        Authorization: ${TRAVISCI_AUTH_TOKEN}
#        travis-api-version: '3'
#
#
#    '/newrelic/api':
#      target: https://api.newrelic.com
#      headers:
#        X-Api-Key: ${NEW_RELIC_USER_KEY}
#
#    '/pagerduty':
#      target: https://api.pagerduty.com
#      headers:
#        Authorization: Token token=${PAGERDUTY_TOKEN}
#
#    '/buildkite/api':
#      target: https://api.buildkite.com/v2/
#      headers:
#        Authorization: ${BUILDKITE_TOKEN}
#
#
#    '/ilert':
#      target: https://api.ilert.com
#      allowedMethods: ['GET', 'POST', 'PUT']
#      allowedHeaders: ['Authorization']
#      headers:
#        Authorization: ${ILERT_AUTH_HEADER}
#
#    '/airflow':
#      target: https://your.airflow.instance.com/api/v1
#      headers:
#        Authorization: ${AIRFLOW_BASIC_AUTH_HEADER}
#
#    '/gocd':
#      target: https://your.gocd.instance.com/go/api
#      allowedMethods: ['GET']
#      allowedHeaders: ['Authorization']
#      headers:
#        Authorization: Basic ${GOCD_AUTH_CREDENTIALS}
#
#    '/dynatrace':
#      target: https://your.dynatrace.instance.com/api/v2
#      headers:
#        Authorization: 'Api-Token ${DYNATRACE_ACCESS_TOKEN}'
#
#    '/stackstorm':
#      target: https://your.stackstorm.instance.com/api
#      headers:
#        St2-Api-Key: ${ST2_API_KEY}
#
#    '/puppetdb':
#      target: https://your.puppetdb.instance.com

organization:
  name: WebGrip

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local'
    # dockerImage: my-org/techdocs # use a custom docker image
    # pullImage: true # or false to disable automatic pulling of image (e.g. if custom docker login is required)
    mkdocs:
      # (Optional)  techdocs.generator.omitTechdocsCoreMkdocsPlugin can be used to disable automatic addition of techdocs-core plugin to the mkdocs.yaml files.
      # Defaults to false, which means that the techdocs-core plugin is always added to the mkdocs file.
      omitTechdocsCorePlugin: false

      # (Optional and not recommended) Configures the techdocs generator to
      # attempt to ensure an index.md exists falling back to using <docs-dir>/README.md
      # or README.md in case a default <docs-dir>/index.md is not provided.
      # Note that https://www.mkdocs.org/user-guide/configuration/#edit_uri behavior
      # will be broken in these scenarios.
      legacyCopyReadmeMdToIndexMd: false

      # (Optional) Configures the default plugins which should be added
      # automatically to every mkdocs.yaml file. This simplifies the usage as
      # e.g. styling plugins can be added once for all.
      # Make sure that the defined plugins are installed locally / in the Docker
      # image.
      # By default, only the techdocs-core plugin will be added (except if
      # omitTechdocsCorePlugin: true).
      defaultPlugins: [ 'techdocs-core' ]
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3' or 'azureBlobStorage' or 'openStackSwift'. Read documentation for using alternatives.

dynatrace:
  baseUrl: https://your.dynatrace.instance.com

nomad:
  addr: 0.0.0.0

# Score-cards sample configuration.
scorecards:
  jsonDataUrl: https://raw.githubusercontent.com/Oriflame/backstage-plugins/main/plugins/score-card/sample-data/
  wikiLinkTemplate: https://link-to-wiki/{id}

#rollbar:
#  organization: my-company
#  # NOTE: The rollbar-backend & accountToken key may be deprecated in the future (replaced by a proxy config)
#  accountToken: my-rollbar-account-token

lighthouse:
  baseUrl: http://localhost:3003

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters: []

#kafka:
#  clientId: backstage
#  clusters:
#    - name: cluster
#      dashboardUrl: https://akhq.io/
#      brokers:
#        - localhost:9092

#allure:
#  baseUrl: http://localhost:5050/allure-docker-service

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        - Component
        - API
        - Resource
        - System
        - Domain
        - Location
  providers:
    githubOrg:
      id: production
      githubUrl: https://github.com
      orgs: [ 'webgrip' ]
      schedule:
        initialDelay: { seconds: 1 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }
    github:
      mainBranches:
        organization: 'webgrip' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'main' # string
          repository: '.*' # Regex
        schedule: # same options as in SchedulerServiceTaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 35 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
      masterBranches:
        organization: 'webgrip' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'master' # string
          repository: '.*' # Regex
        schedule: # same options as in SchedulerServiceTaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 1 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
#      customProviderId:
#        organization: 'new-org' # string
#        catalogPath: '/custom/path/catalog-info.yaml' # string
#        filters: # optional filters
#          branch: 'develop' # optional string
#          repository: '.*' # optional Regex
#      wildcardProviderId:
#        organization: 'new-org' # string
#        catalogPath: '/groups/**/*.yaml' # this will search all folders for files that end in .yaml
#        filters: # optional filters
#          branch: 'develop' # optional string
#          repository: '.*' # optional Regex
#      topicProviderId:
#        organization: 'backstage' # string
#        catalogPath: '/catalog-info.yaml' # string
#        filters:
#          branch: 'main' # string
#          repository: '.*' # Regex
#          topic: 'backstage-exclude' # optional string
#      topicFilterProviderId:
#        organization: 'backstage' # string
#        catalogPath: '/catalog-info.yaml' # string
#        filters:
#          branch: 'main' # string
#          repository: '.*' # Regex
#          topic:
#            include: [ 'backstage-include' ] # optional array of strings
#            exclude: [ 'experiments' ] # optional array of strings
#      validateLocationsExist:
#        organization: 'backstage' # string
#        catalogPath: '/catalog-info.yaml' # string
#        filters:
#          branch: 'main' # string
#          repository: '.*' # Regex
#        validateLocationsExist: true # optional boolean
#      visibilityProviderId:
#        organization: 'backstage' # string
#        catalogPath: '/catalog-info.yaml' # string
#        filters:
#          visibility:
#            - public
#            - internal
#      enterpriseProviderId:
#        host: ghe.example.net
#        organization: 'backstage' # string
#        catalogPath: '/catalog-info.yaml' # string
    backstageOpenapi:
      plugins:
        - catalog
        - search

  processors:
    ldapOrg:
      ### Example for how to add your enterprise LDAP server
      # providers:
      #   - target: ldaps://ds.example.net
      #     bind:
      #       dn: uid=ldap-reader-user,ou=people,ou=example,dc=example,dc=net
      #       secret: ${LDAP_SECRET}
      #     users:
      #       dn: ou=people,ou=example,dc=example,dc=net
      #       options:
      #         filter: (uid=*)
      #       map:
      #         description: l
      #     groups:
      #       dn: ou=access,ou=groups,ou=example,dc=example,dc=net
      #       options:
      #         filter: (&(objectClass=some-group-class)(!(groupType=email)))

  locations:
    - type: file
      target: ./catalog/webgrip/webgrip-corporation.yaml
      rules:
       - allow: [User, Group, Location]
scaffolder:
  # Use to customize default commit author info used when new components are created
  # defaultAuthor:
  #   name: Scaffolder
  #   email: scaffolder@backstage.io
  # Use to customize the default commit message when new components are created
  # defaultCommitMessage: 'Initial commit'

auth:
  environment: development
  providers:
#    google:
#      development:
#        clientId: ${AUTH_GOOGLE_CLIENT_ID}
#        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
    guest: {}

costInsights:
  engineerCost: 200000
  engineerThreshold: 0.5
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudDataflow:
      name: Cloud Dataflow
      icon: data
    cloudStorage:
      name: Cloud Storage
      icon: storage
    bigQuery:
      name: BigQuery
      icon: search
    events:
      name: Events
      icon: data
  metrics:
    DAU:
      name: Daily Active Users
      default: true
    MSC:
      name: Monthly Subscribers
  currencies:
    engineers:
      label: 'Engineers 🛠'
      unit: 'engineer'
    usd:
      label: 'US Dollars 💵'
      kind: 'USD'
      unit: 'dollar'
      prefix: '$'
      rate: 1
    carbonOffsetTons:
      label: 'Carbon Offset Tons ♻️⚖️s'
      kind: 'CARBON_OFFSET_TONS'
      unit: 'carbon offset ton'
      rate: 3.5
    beers:
      label: 'Beers 🍺'
      kind: 'BEERS'
      unit: 'beer'
      rate: 4.5
    pintsIceCream:
      label: 'Pints of Ice Cream 🍦'
      kind: 'PINTS_OF_ICE_CREAM'
      unit: 'ice cream pint'
      rate: 5.5

#pagerDuty:
#  eventsBaseUrl: 'https://events.pagerduty.com/v2'

#jenkins:
#  instances:
#    - name: default
#      baseUrl: https://jenkins.example.com
#      username: backstage-bot
#      apiKey: 123456789abcdef0123456789abcedf012

#azureDevOps:
#  host: dev.azure.com
#  token: my-token
#  organization: my-company

#apacheAirflow:
#  baseUrl: https://your.airflow.instance.com
#
#gocd:
#  baseUrl: https://your.gocd.instance.com
#
#stackstorm:
#  webUrl: https://your.stackstorm.webui.instance.com

permission:
  enabled: true
